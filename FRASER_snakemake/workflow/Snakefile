import os 
import sys
import pandas as pd

###################################---Step 1: Define all Config Variables---######################################################
output_directory=config["output_directory"]
metadata_file=config["metadata_file"]
data_type=config["data_type"]
mig_file=config["mig_file"]
input_directory=config["input_directory"]
file_list=config["file_list"]
bam_file_directory=config["bam_file_directory"]
FRASER_type=config["FRASER_type"]

###########################################---Step 2: Define Rules--##############################################################
if FRASER_type == "FRASER1":
    myoutput=config["output_directory"] + "/FRASER1/FRASER_output.csv"
    myoutput2=config["output_directory"] + "/FRASER_results_description.csv"

if FRASER_type == "FRASER2":
    myoutput=config["output_directory"] + "/FRASER2/FRASER_output.csv"
    myoutput2=config["output_directory"] + "/FRASER_results_description.csv"

if FRASER_type == "Both":
    myoutput=config["output_directory"] + "/FRASER1/FRASER_output.csv"
    myoutput2=config["output_directory"] + "/FRASER2/FRASER_output.csv"
    

ruleorder:
    make_symlinks > create_input_file

rule all:
    input:
        config["input_directory"] + "/FRASER_symlinking_instructions.sh",
        config["output_directory"] + "/FRASER_input.csv",
        myoutput,
        myoutput2
        #config["output_directory"] + "/FRASER_results_raw.csv",
        #config["output_directory"] + "/FRASER_results_zscores.csv"

rule make_symlinks: 
    input:
        file_list = config["file_list"]
    params:
        input_directory = config["input_directory"]
    output:
        output_file = config["input_directory"] + "/FRASER_symlinking_instructions.sh"
    resources:
        time="4:00:00",
        mem="158GB",
        partition="nih_s10",
        account="smontgom"
    shell:"""
        mkdir -p {params.input_directory}
        Rscript scripts/make_symlinks.r  {input.file_list} {params.input_directory}
        
        sed 's/\"//g' {params.input_directory}/FRASER_symlinking_instructions_unclean.sh > {params.input_directory}/FRASER_symlinking_instructions_unclean2.sh

        {{ echo -n '#/bin/bash!\n'; cat {params.input_directory}/FRASER_symlinking_instructions_unclean2.sh; }} >{params.input_directory}/FRASER_symlinking_instructions.sh

        rm -rf {params.input_directory}/FRASER_symlinking_instructions_unclean.sh
        rm -rf {params.input_directory}/FRASER_symlinking_instructions_unclean2.sh

        #Snakemake will error out if you do not do something with the output file in the rule. 
        #To get around this, I ls the output file
        bash {output.output_file}
        """

rule create_input_file:
    input:
        input_directory = config["input_directory"],
        input_file = config["input_directory"] + "/FRASER_symlinking_instructions.sh"
    params:
        data_type = config["data_type"],
        output_directory = config["output_directory"]
    output:
        output_file = config["output_directory"] + "/FRASER_input.csv"
    resources:
        time="4:00:00",
        mem="158GB",
        partition="nih_s10",
        account="smontgom"
    shell:"""
    mkdir -p {params.output_directory}
    ls {input.input_file}
    Rscript scripts/preprocessing.r  {input.input_directory} {params.data_type} {params.output_directory}
    
    #Snakemake will error out if you do not do something with the output file in the rule. 
    #To get around this, I ls the output file
    ls {output.output_file}
    """

rule run_FRASER:
    input:
        input_file = config["output_directory"] + "/FRASER_input.csv"
    params:
        output_directory = config["output_directory"] + "/FRASER1"
    output:
        output_file = config["output_directory"] + "/FRASER1/FRASER_output.csv"
    resources:
        mem = "1TB",
        time = "96:00:00"
    conda:
        'fraser1'
    shell:"""
    Rscript scripts/FRASER.r {input.input_file} {params.output_directory}

    #Snakemake will error out if you do not do something with the output file in the rule. 
    #To get around this, I ls the output file
    ls {output.output_file}
    echo "rule done"
    """

rule run_FRASER2:
    input:
        input_file = config["output_directory"] + "/FRASER_input.csv"
    params:
        output_directory = config["output_directory"] + "/FRASER2",
        type=config["FRASER_type"],
        both_output=config["output_directory"] + "/FRASER_results_description.csv"
    output:
        output_file = config["output_directory"] + "/FRASER2/FRASER_output.csv"
    resources:
        mem = "512GB",
        time = "96:00:00"
    conda:
        'fraser2'
    shell:"""
    Rscript scripts/FRASER2.r {input.input_file} {params.output_directory}

    if [ {params.type} = "Both" ]; then
        Rscript scripts/FRASER_results_print.r {input.input_file} {params.type} {params.both_output}
    fi 

    #Snakemake will error out if you do not do something with the output file in the rule. 
    #To get around this, I ls the output file
    ls {output.output_file}
    echo "rule done"
    """

rule FRASER_results:
    input:
        input_file = config["output_directory"] + "/FRASER_input.csv"
    params:
        type = config["FRASER_type"]
    output:
        output_file = config["output_directory"] + "/FRASER_results_description.csv"
    resources:
        time="96:00:00",
        mem="236GB"
    shell:"""
    Rscript scripts/FRASER_results_print.r {input.input_file} {params.type} {output.output_file} 

    #Snakemake will error out if you do not do something with the output file in the rule. 
    #To get around this, I ls the output file
    ls {output.output_file}
    echo "rule done"
    """

rule compile_results:
    input:
        input_file = config["output_directory"] + "/FRASER_input.csv",
        output_file = config["output_directory"] + "/FRASER_output.csv"
    params:
        metadata_file = config["metadata_file"],
        mig_file = config["mig_file"],
        output_directory = config["output_directory"]
    output:
        raw_output = config["output_directory"] + "/FRASER_results_raw.csv",
        zscore_output = config["output_directory"] + "/FRASER_results_zscores.csv"
    shell:"""
    Rscript scripts/results_compilation.r {input.input_file} {input.output_file} {params.metadata_file} {params.mig_file} {params.output_directory}

    #Snakemake will error out if you do not do something with the output file in the rule. 
    #To get around this, I ls the output file
    ls {output.raw_output}
    ls {output.zscore_output}
    """